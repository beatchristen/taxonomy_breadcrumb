<?php
// $Id$.

/**
 * @file
 * The taxonomy_breadcrumb module generates taxonomy based breadcrumbs on node 
 * pages, where the breadcrumbs link to the normal taxonomy/term pages or to 
 * administrator defined pages.
 *
 * Breadcrumbs take on the form:  
 *   [HOME] >> [VOCABULARY] >> TERM >> [TERM] ...
 *
 *   - The HOME breadcrumb (if present) will link to the homepage.  The text 
 *     displayed for HOME should be administrator configurable.  If the HOME
 *     breadcrumb is not defined by the administrator, it will not appear
 *     in the breadcrumb trail.
 *   - The VOCABULARY breadcrumb (if present) will link to an administrator 
 *     defined page (node).  If the VOCABULARY does not have an adminstrator
 *     defined page, it will not appear in the breadcrumb trail.
 *   - Each TERM breadcrumb will link to either 
 *     (1) taxonomy/term/tid by default, or 
 *     (2) an administrator defined page (node) if one is defined for the term.
 *   - These administrator defined "breadcrumb links" for VOCABULARIES and TERMS
 *     can be controlled from the add/edit vocabulary and add/edit term 
 *     administrator pages. 
 *
 * Examples:
 *   home >> term >> term
 *   mysite >> term >> term
 *   home >> vocabulary >> term >> term
 *   vocabulary >> term >> term
 *
 * Issues:
 *   - use of db_rewrite_sql?
 *   - This module is not expected to be compatible with other modules that call
 *     drupal_set_breadcrumb, such as taxonomy_context.
 *   - With multi-parent terms, all parent terms seem to show up, look into
 *     taxonomy_get_parents_all. 
 */


/**
 * Return lightest term for given node ($nid).
 * Similar to taxonomy_node_get_terms, but only return the lightest term in the 
 * lightest vocab for the node.
 */
function taxonomy_context_node_get_lightest_term($nid) {
  // We only want the first row of the result--this is the lightest term of the 
  // lightest vocab.  This query should be the same as the query found in 
  // taxonomy_node_get_terms.
  $result = db_query(db_rewrite_sql('SELECT t.* FROM {term_node} r INNER JOIN {term_data} t ON r.tid = t.tid INNER JOIN {vocabulary} v ON t.vid = v.vid WHERE r.nid = %d ORDER BY v.weight, t.weight, t.name', 't', 'tid'), $nid);
  $term = db_fetch_object($result);  // extract first row of query
  return $term;
}


/**
 * Return the administrator defined vocabulary path for a given vocabulary 
 * ($vid).  If a path doesn't exist, NULL is returned.
 */
function taxonomy_breadcrumb_get_vocabulary_path($vid) {
  $result = db_query("SELECT path FROM {taxonomy_breadcrumb_vocabulary} WHERE vid = %d", $vid);
  $path = NULL;
  if ($row = db_fetch_array($result)) {
    $path = $row['path'];
  }
  return $path;
} 


/**
 * Return the administrator defined term path for a given term ($tid).
 * If a path doesn't exist, NULL is returned.
 */
function taxonomy_breadcrumb_get_term_path($tid) {
  $result = db_query("SELECT path FROM {taxonomy_breadcrumb_term} WHERE tid = %d", $tid);
  $path = NULL;
  if ($row = db_fetch_array($result)) {
    $path = $row['path'];
  }
  return $path;  
} 


/**
 * If the current drupal path (q=) is /node/nid, generate the breadcrumb trail 
 * based on nid.
 */
function taxonomy_breadcrumb_generate_breadcrumb() {

  // Check for arg(2) to be null, otherwise we would change breadcrumbs on 
  // /node/1/edit pages.
  if (arg(0) == 'node' && arg(2) == NULL) {

    // Extract lightest term from lightest vocabulary assosciated with node.
    $nid = arg(1);
    $term = taxonomy_context_node_get_lightest_term($nid);
    
    // HOME breadcrumb generation
    $home_text = variable_get('taxonomy_breadcrumb_home', '');
    if ($home_text != '') {
      $breadcrumb[] = l($home_text, NULL);
    }

    // VOCABULARY breadcrumb generation
    $vocabulary_path = taxonomy_breadcrumb_get_vocabulary_path($term->vid);
    if ($vocabulary_path != NULL) {
      $vocabulary = taxonomy_get_vocabulary($term->vid);
      $breadcrumb[] = l($vocabulary->name, $vocabulary_path);      
    }
    
    // TERM breadcrumb generation
    $parent_terms = array_reverse(taxonomy_get_parents_all($term->tid));
    foreach ($parent_terms as $parent_term) {
      $term_path = taxonomy_breadcrumb_get_term_path($parent_term->tid);
      if ($term_path == NULL) {
        $term_path = "taxonomy/term/$parent_term->tid";
      }
      $breadcrumb[] = l($parent_term->name, $term_path);
    }

    // Remove current TERM from end of breadcrumb trail
    if (!variable_get('taxonomy_breadcrumb_show_current_term', TRUE)) {
      array_pop($breadcrumb);
    }
    
    drupal_set_breadcrumb($breadcrumb);
  }
}

/**
 * Implementation of hook_settings().
 */
function taxonomy_breadcrumb_settings() {

  $form['info']['taxonomy_breadcrumb_info'] = array('#type' => 'item',
    '#value' => t('<p>The taxonomy_breadcrumb module generates taxonomy based breadcrumbs on node pages, where the breadcrumbs link to the normal taxonomy/term pages or to administrator defined pages.  Breadcrumbs take the following form:</p>
                  <p>[HOME] >> [VOCABULARY] >> TERM >> [TERM] ...</p>
                  <p><ul>
                  <li>The text displayed for HOME is configurable below.  The HOME breadcrumb (if present) will link to the homepage.  If the HOME breadcrumb text is not defined (blank), it will not appear in the breadcrumb trail.</li>
                  <li>The VOCABULARY breadcrumb (if present) will link to an administrator defined page (node).  If the VOCABULARY does not have an adminstrator defined page, it will not appear in the breadcrumb trail. This can be configured on the add/edit vocabulary pages within %tax_link (taxonomy).</li>
                  <li>Each TERM breadcrumb will link to either (1) taxonomy/term/tid by default, or (2) an administrator defined page (node) if one is defined for the term.  This can be configured on the add/edit term pages within %tax_link (taxonomy).</li>
                  </ul></p>
                  Examples:
                  <ul>
                  <li>home >> term >> term</li>
                  <li>mysite >> term >> term</li>
                  <li>home >> vocabulary >> term >> term</li>
                  <li>vocabulary >> term >> term</li>
                  </ul><p></p>', array('%tax_link' => l('administer >> categories', 'admin/taxonomy'))),
  );


  $form['settings'] = array(
    '#type' => 'fieldset',
    '#title' => t('Settings'),
    '#collapsible' => FALSE,
  );

  $form['settings']['taxonomy_breadcrumb_home'] = array(
    '#type' => 'textfield',
    '#title' => t('Home breadcrumb text'),
    '#default_value' => variable_get('taxonomy_breadcrumb_home', ''),
    '#description' => t('Text to display at top of breadcrumb trail.  Typically home or your site name.  Leave blank to have no home breadcrumb.'),
  ); 

  $form['settings']['taxonomy_breadcrumb_show_current_term'] = array(
    '#type' => 'checkbox',
    '#title' => t('Show current term in breadcrumb trail?'),
    '#default_value' => variable_get('taxonomy_breadcrumb_show_current_term', TRUE),
    '#description' => t('When enabled, the lightest term assosciated with node is shown as the last breadcrumb in the breadcrumb trail.  When disabled, the only terms shown in the breadcrumb trail are parent terms (if any parents exist).  The recommended setting is enabled.'),
  ); 

  return $form;
}


/**
 * Implementation of hook_menu().
 */
function taxonomy_breadcrumb_menu($may_cache) {

  if ($may_cache) {
    $items[] = array('path' => 'breadcrumb/', 'title' => t('taxonomy vocabulary'),
      'callback' => 'taxonomy_context_vocabulary_page',
      'access' => user_access('access content'),
      'type' => MENU_CALLBACK);

  }
  else {
  
    taxonomy_breadcrumb_generate_breadcrumb();
  }
  return $items;
}


/**
 * Implementation of hook_help().
 */
function taxonomy_breadcrumb_help($section) {
  
  switch ($section) {
    case 'admin/help#taxonomy_breadcrumb':
      $output .= t('<p>See %link.</p>', array('%link' => l('admin/settings/taxonomy_breadcrumb', 'admin/settings/taxonomy_breadcrumb')));
      break;
    case 'admin/modules#description':
      $output .= t('Enables taxonomy based breadcrumbs and allows for node assosciations with taxonomy terms.');
      break;
  }
  return $output;
}


/**
 * Implementation of hook_form_alter().  This must be used over hook_taxonomy to
 * add the Breadcrumb Path fields to the vocabulary and term forms.  The 
 * hook_taxonomy function does not provide a way to obtain the vid or tid
 * of the vocabulary or term.
 */
function taxonomy_breadcrumb_form_alter($form_id, &$form) {
  if ($form_id == 'taxonomy_form_vocabulary') {

    $form['taxonomy_breadcrumb_path'] = array(
      '#type' => 'textfield',
      '#title' => t('Breadcrumb path (taxonomy_breadcrumb)'),
      '#default_value' => taxonomy_breadcrumb_get_vocabulary_path($form['vid']['#value']), 
      '#maxlength' => 64,
      '#description' => t('Specify the path this vocabulary links to as a breadcrumb.  If blank, the breadcrumb will not appear.  Use a relative path and don\'t add a trailing slash.  For example: node/42 or my/path/alias.'),
      '#weight' => 0,
    );
  }
  elseif ($form_id == 'taxonomy_form_term') {
    $form['taxonomy_breadcrumb_path'] = array(
      '#type' => 'textfield',
      '#title' => t('Breadcrumb path (taxonomy_breadcrumb)'),
      '#default_value' => taxonomy_breadcrumb_get_term_path($form['tid']['#value']), 
      '#maxlength' => 64,
      '#description' => t('Specify the path this term links to as a breadcrumb.  If blank, the breadcrumb links to the default taxonomy page.  Use a relative path and don\'t add a trailing slash.  For example: node/42 or my/path/alias.'),
      '#weight' => 0,
    );
  
  }
} 


/**
 * Implementation of hook_taxonomy().  This implementation checks to see if a
 * vocabulary or term is being updated and makes the necessary changes in
 * the taxonomy_breadcrumb database tables.
 */
function taxonomy_breadcrumb_taxonomy($op, $type, $object = NULL) {

  // if (after a vocabulary or term is updated)
  // called by module_invoke_all('taxonomy', 'update', 'term', $edit);  in taxonomy.module
  if ( $op == 'update' && ($type == 'vocabulary' || $type == 'term') ) {

    // Set variables to used in SQL query to reflect if vocabulary or term is 
    // being updated.
    if ($type == 'vocabulary') {
      $table = '{taxonomy_breadcrumb_vocabulary}';
      $key_type = 'vid';
      $old_path = taxonomy_breadcrumb_get_vocabulary_path($object['vid']);
    }
    elseif ($type == 'term') {
      $table = '{taxonomy_breadcrumb_term}';
      $key_type = 'tid';
      $old_path = taxonomy_breadcrumb_get_term_path($object['tid']);
    }
    $key = $object[$key_type];
    $new_path = $object['taxonomy_breadcrumb_path'];
    
    // Delete record from taxonomy_breadcrumb_vocabulary or taxonomy_breadcrumb_term
    if (strlen($new_path) == 0 && $old_path !== NULL) {
      db_query("DELETE FROM $table WHERE $key_type = %d", $key); 
    }
    
    // Update existing record in taxonomy_breadcrumb_vocabulary or taxonomy_breadcrumb_term
    elseif (strlen($new_path) != 0 && $old_path != NULL) {
      db_query("UPDATE $table SET path = '%s' WHERE $key_type = %d", $new_path, $key ); 
    }
    
    // Create new record in taxonomy_breadcrumb_vocabulary or taxonomy_breadcrumb_term
    elseif (strlen($new_path) != 0 && $old_path == NULL) {
      db_query("INSERT INTO $table ($key_type, path) VALUES (%d, '%s')", $key, $new_path); 
    }
    
  }
} 
